# ----------------------------------------------------------- #
# Configuration Fragment : Measure Deployment Time            #
# ----------------------------------------------------------- #
# This fragment installs a duration tracker that tracks the   #
# duration in seconds between the completion of the HTTP      #
# request and the completion of the deployment.
# ----------------------------------------------------------- #

# Global test configuration
# ===========================
config:

  # Define the metrics we are measuring
  metrics:
    - name: deploymentTime
      uuid: cfac77fceb244862aedd89066441c416
      desc: The time from the HTTP request completion till the deployment success
      summarize:
        - class: summarize.PercentileSummarizer
          name: p50
          percentile: 50
        - class: summarize.PercentileSummarizer
          name: p75
          percentile: 75
        - class: summarize.PercentileSummarizer
          name: p95
          percentile: 95
        - class: summarize.PercentileSummarizer
          name: p98
          percentile: 98
        - class: summarize.PercentileSummarizer
          name: p99
          percentile: 99
        - class: "@mean_err"

      units: sec

  # Define the indicators that can summarise our values
  indicators:

    # Calculate `meanDeploymentTime` by calculating the normalizing average
    # of all the `deploymentTime` mean values, normalized against each test's
    # normalization expression
    - name: meanDeploymentTime
      class: indicator.NormalizedMeanMetricIndicator
      metric: deploymentTime.mean_err
      normalizeto: "{{normalize_to}}"

# Tracker configuration
# ===========================
trackers:

  # Track deploymentTime as the duration between an `MarathonDeploymentStartedEvent`
  # and an `MarathonDeploymentSuccessEvent`
  - class: tracker.DurationTracker
    metric: deploymentTime
    events:
      start: MarathonDeploymentStartedEvent
      end: MarathonDeploymentSuccessEvent
